type User
@model(subscriptions: null)
@key(
  name: "usersByLocation"
  fields: ["location", "id"]
  queryField: "usersByLocation"
)
@auth(
  rules: [
    { allow: owner, ownerField: "id", operations: [read, update] }
    { allow: private, provider: iam }
  ]
) {
  id: ID!
  location: String
  createdAt: String
  images: [String]
  name: String
  phoneNumber: String
  DOB: String
  intrests: [String!]!
  gender: String
  sexualOrientation: String
  email: String
  identityStatus: String
  answeredQuestions: [AnsweredQuestion!]! @connection(keyName: "byUser", fields:["id"], sortField: "createdAt")
  matches: [Match!]! @connection(keyName: "UserMatches", fields: ["id"], sortField: "createdAt")
  matchFilters: MatchFilters
}


type MatchFilters
{
  gender: String!
  sexualOrientation: String!
  maxAge: Int!
  distance: Float!
  minAge: Int!
}
type Question
@model(subscriptions: null)
@auth(
  rules: [
    { allow: private, provider: iam }
  ]
){
  id: ID!
  body: String!
  createdAt: String
  answers: [Answer]
}

type Answer
{
  id: ID!
  body: String!
  effects: [Effect!]!
  iceBreaker: String!
}

type Effect
{
  feature: String!
  value: Float!
}


type AnsweredQuestion
@model(subscriptions: null)
@auth(
  rules: [
    { allow: private, provider: iam }
    { allow: owner, ownerField: "userId" }
  ]
)
@key(name: "byUser", fields: ["userId", "createdAt"]){
  id: ID!
  createdAt: String
  userId: ID!
  question: Question! @connection
  answerId: ID!
}

type Match
@key(name: "UserMatches", fields: ["userId", "createdAt"])
@model(subscriptions: null)
@auth(
  rules: [
    { allow: owner, ownerField: "userId" }# todo bring back => , operations: [read]
    { allow: private, provider: iam }
  ]
) {
  id: ID!
  accepted: Boolean!
  approved: Boolean!
  userId: ID!
  images: [String]!
  intrests: [String!]!
  distance: String
  matchRate: Float
  createdAt: String
  displayName: String!
  conversation: Conversation @connection(name: "MatchConversation")
}

type Conversation
@model(subscriptions: null)
@auth(
  rules: [
    { allow: owner, ownerField: "users", operations: [read] }
    { allow: private, provider: iam }
  ]
) {
  id: ID!
  messages:[Message!]! @connection(keyName:"byConversation", fields:["id"], sortField: "createdAt")
  users: [ID]!
  createdAt: String!
  matches: [Match!]! @connection(name: "MatchConversation")
}



type Message
@model(subscriptions: null)
@key(name: "byConversation", fields: ["conversationID"])
@auth(
  rules: [
    { allow: owner, ownerField: "author" }
    { allow: private, provider: iam }
    { allow: owner, ownerField: "recipient", operations: [read] }
  ]
)
{
  id: ID!
  authorId: ID!
  recipientId: ID!
  createdAt: String
  content: String!
  messageStatus: messageStatus!
  liked: Boolean
  conversationID: ID!
}

input onCreateMessageInput {
  recipientId: ID!
  authorId: ID!
}
enum messageStatus {
  read,
  sent,
}



type Subscription {
  subscribeToNewMatch(userId: ID!): Match!
  @aws_subscribe(mutations: ["createMatch"])
  subscribeToUpdateMatch(userId: ID!): Match!
  @aws_subscribe(mutations: ["updateMatch"])
  subscribeToDeleteMatch(userId: ID!): Match!
  @aws_subscribe(mutations: ["deleteMatch"])
  subscribeToNewMessage(conversationID: ID!): Message!
  @aws_subscribe(mutations: ["createMessage"])
  subscribeToUpdatedMessage(conversationID: ID!): Message!
  @aws_subscribe(mutations: ["updateMessage"])
  subscribeToDeletedMessage(conversationID: ID!): Message!
  @aws_subscribe(mutations: ["deleteMessage"])
}
